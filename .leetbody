{"lang":"python3","question_id":"79","typed_code":"from collections import Counter\n\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        ROWS, COLS = len(board), len(board[0])\n        path = set()\n\n        def dfs(r,c,i):\n            if i == len(word):\n                return True\n\n            if(min(r,c) < 0 or r>= ROWS or c >= COLS or word[i] != board[r][c] or (r,c) in path):\n                return False\n            \n            path.add((r,c))\n            res = ( dfs(r+1,c,i+1) or dfs(r-1,c,i+1) or dfs(r,c+1, i+1) or dfs(r,c-1, i+1))\n            path.remove((r,c))\n            return res\n\n        count = defaultdict(int,sum(map(Counter, board), Counter()))\n        if count[word[0]] > count[word[-1]]:\n            word = word[::-1]\n\n        for r in range(ROWS):\n            for c in range(COLS):\n                if dfs(r,c,0):\n                    return True\n        return False\n        "}