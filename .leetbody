{"lang":"python3","data_input":"[\"KthLargest\",\"add\",\"add\",\"add\",\"add\",\"add\"]\n[[3,[4,5,8,2]],[3],[5],[10],[9],[4]]","typed_code":"from typing import List\nimport heapq\n\nclass KthLargest:\n    def __init__(self, k: int, nums: List[int]):\n        (self.min_heap, self.k) = (nums, k)\n        heapq.heapify(self.min_heap)\n        while len(self.min_heap) > k:\n            heapq.heappop(self.min_heap)\n        \n    def add(self, val: int) -> int:\n        heapq.heappush(self.min_heap, val)\n        if len(self.min_heap) > self.k:\n            heapq.heappop(self.min_heap)\n        return self.min_heap[0]\n\n\nkth_largest = KthLargest(3, [4, 5, 8, 2])\n\n# Test Case 1\nadd_1 = kth_largest.add(3)\nexpected_output_1 = 4\n\nprint(\"Test Case 1:\")\nprint(\"add(3) => Output:\", add_1)\n\nif add_1 == expected_output_1:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")\n\n# Test Case 2\nadd_2 = kth_largest.add(5)\nexpected_output_2 = 5\n\nprint(\"\\nTest Case 2:\")\nprint(\"add(5) => Output:\", add_2)\n\nif add_2 == expected_output_2:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")\n\n# Test Case 3\nadd_3 = kth_largest.add(10)\nexpected_output_3 = 5\n\nprint(\"\\nTest Case 3:\")\nprint(\"add(10) => Output:\", add_3)\n\nif add_3 == expected_output_3:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")\n\n# Test Case 4\nadd_4 = kth_largest.add(9)\nexpected_output_4 = 8\n\nprint(\"\\nTest Case 4:\")\nprint(\"add(9) => Output:\", add_4)\n\nif add_4 == expected_output_4:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")\n\n# Test Case 5\nadd_5 = kth_largest.add(4)\nexpected_output_5 = 8\n\nprint(\"\\nTest Case 5:\")\nprint(\"add(4) => Output:\", add_5)\n\nif add_5 == expected_output_5:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")","question_id":"789"}