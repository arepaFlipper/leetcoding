{"question_id":"133","lang":"python3","data_input":"[[2,4],[1,3],[2,4],[1,3]]\n[[]]\n[]","typed_code":"from typing import Optional, List, Dict\n\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=0, neighbors=None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\nclass Solution:\n    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:\n        old_to_new: Dict = {}\n\n        def depth_first_search(node):\n            if node in old_to_new:\n                return old_to_new[node]\n\n            node_copied = Node(node.val)\n            old_to_new[node] = node_copied\n            for neighbor in node.neighbors:\n                node_copied.neighbors.append(depth_first_search(neighbor))\n            return node_copied\n\n        return depth_first_search(node) if node else None\n\nsolution = Solution()\n\n# Test Case 1\nadjList_1 = [[2, 4], [1, 3], [2, 4], [1, 3]]\nexpected_output_1 = [[2, 4], [1, 3], [2, 4], [1, 3]]\n\nprint(\"Test Case 1:\")\ngraph_1 = Solution().cloneGraph(Node(1, [Node(2), Node(4)]))\noutput_1 = []\nif graph_1:\n    visited_1 = set()\n\n    def traverse(node):\n        if node.val not in visited_1:\n            visited_1.add(node.val)\n            output_1.append([neighbor.val for neighbor in node.neighbors])\n            for neighbor in node.neighbors:\n                traverse(neighbor)\n\n    traverse(graph_1)\n\nprint(f\"cloneGraph({adjList_1}) => Output:\", output_1)\n\nif output_1 == expected_output_1:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")\n\n# Test Case 2\nadjList_2 = [[]]\nexpected_output_2 = [[]]\n\nprint(\"\\nTest Case 2:\")\ngraph_2 = Solution().cloneGraph(Node(1, []))\noutput_2 = []\nif graph_2:\n    visited_2 = set()\n\n    def traverse(node):\n        if node.val not in visited_2:\n            visited_2.add(node.val)\n            output_2.append([neighbor.val for neighbor in node.neighbors])\n            for neighbor in node.neighbors:\n                traverse(neighbor)\n\n    traverse(graph_2)\n\nprint(f\"cloneGraph({adjList_2}) => Output:\", output_2)\n\nif output_2 == expected_output_2:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")\n\n# Test Case 3\nadjList_3 = []\nexpected_output_3 = []\n\nprint(\"\\nTest Case 3:\")\ngraph_3 = Solution().cloneGraph(None)\noutput_3 = []\nif graph_3:\n    visited_3 = set()\n\n    def traverse(node):\n        if node.val not in visited_3:\n            visited_3.add(node.val)\n            output_3.append([neighbor.val for neighbor in node.neighbors])\n            for neighbor in node.neighbors:\n                traverse(neighbor)\n\n    traverse(graph_3)\n\nprint(f\"cloneGraph({adjList_3}) => Output:\", output_3)\n\nif output_3 == expected_output_3:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")\n"}