{"lang":"python3","question_id":"417","data_input":"[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n[[1]]","typed_code":"from typing import List\n\nclass Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        (ROWS,COLS) = (len(heights), len(heights[0]))\n        (pac,atl) = (set(),set())\n\n        def depth_first_search(row, col, visit, prev_height):\n            if(((row,col) in visit) or (row < 0) or (col < 0) or (row == ROWS) or (col==COLS) or (heights[row][col] < prev_height)):\n                return\n            visit.add((row,col))\n            depth_first_search(row+1, col, visit, heights[row][col])\n            depth_first_search(row-1, col, visit, heights[row][col])\n            depth_first_search(row, col+1, visit, heights[row][col])\n            depth_first_search(row, col-1, visit, heights[row][col])\n\n        for c in range(COLS):\n            depth_first_search(0,c, pac, heights[0][c])\n            depth_first_search(ROWS - 1, c, atl, heights[ROWS -1][c])\n\n        for r in range(ROWS):\n            depth_first_search(r, 0, pac, heights[r][0])\n            depth_first_search(r, COLS -1, atl, heights[r][COLS-1])\n\n        res = []\n        for row in range(ROWS):\n            for col in range(COLS):\n                if (row,col) in pac and (row,col) in atl:\n                    res.append([row,col])\n        return res\n\nsolution = Solution()\n\n# Test Case 1\nheights_1 = [\n    [1,2,2,3,5],\n    [3,2,3,4,4],\n    [2,4,5,3,1],\n    [6,7,1,4,5],\n    [5,1,1,2,4]\n]\nexpected_output_1 = [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n\nprint(\"Test Case 1:\")\noutput_1 = solution.pacificAtlantic(heights_1)\nprint(f\"pacificAtlantic({heights_1}) => Output:\", output_1)\n\nif output_1 == expected_output_1:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")\n\n# Test Case 2\nheights_2 = [[1]]\nexpected_output_2 = [[0,0]]\n\nprint(\"\\nTest Case 2:\")\noutput_2 = solution.pacificAtlantic(heights_2)\nprint(f\"pacificAtlantic({heights_2}) => Output:\", output_2)\n\nif output_2 == expected_output_2:\n    print(\"✅ Expected Output\")\nelse:\n    print(\"❌ Unexpected Output\")"}