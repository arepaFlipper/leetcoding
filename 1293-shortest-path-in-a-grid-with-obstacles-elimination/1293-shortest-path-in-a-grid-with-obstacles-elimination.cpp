#include <algorithm>
#include <array>
#include <iostream>
#include <ostream>
#include <queue>
#include <vector>
class Solution {
private:
  const int dr[4] = {0, 0, -1, 1};
  const int dc[4] = {1, -1, 0, 0};

public:
  int shortestPath(std::vector<std::vector<int>> &grid, int k) {
    const int INF = 1e9;
    int m = grid.size();
    int n = grid[0].size();
    auto dist = std::vector<std::vector<std::vector<int>>>( m, std::vector<std::vector<int>>(n, std::vector<int>(k + 1, INF)));

    std::queue<std::array<int, 3>> q; // (row,column, # obstacles)
    q.push({0, 0, 0}); // initial location
    dist[0][0][0] = 0;

    while (!q.empty()) {
      std::array<int, 3> current = q.front();
      q.pop();

      for (int d = 0; d < 4; d++) {
        std::array<int, 3> next{current[0] + dr[d], current[1] + dc[d], current[2]};

        if ((0 <= next[0]) && (next[0] < m) && (0 <= next[1]) && (next[1] < n)) {
          if (grid[next[0]][next[1]] == 1) { //remove the obstacle
            ++next[2];
          }
          if (next[2] <= k) {
            if (dist[next[0]][next[1]][next[2]] == INF) {
                dist[next[0]][next[1]][next[2]] = dist[current[0]][current[1]][current[2]] + 1;

              q.push(next);
            }
          }
        }
      }
    }
    int answer = INF;
    for (int removed = 0; removed <= k; removed++) {
      answer = std::min(answer, dist[m - 1][n - 1][removed]);
    }
    if (answer == INF) {
      answer = -1;
    }
    return answer;
  }
};

int main() {
  Solution solution;

  // Example 1
  std::vector<std::vector<int>> grid1 = {
      {0, 0, 0}, {1, 1, 0}, {0, 0, 0}, {0, 1, 1}, {0, 0, 0}};

  int k1 = 1;
  int output1 = solution.shortestPath(grid1, k1);
  std::cout << "Example 1: " << output1 << std::endl; // Expected output: 6 

  // Example 2
  std::vector<std::vector<int>> grid2 = {{0, 1, 1}, {1, 1, 1}, {1, 0, 0}};
  int k2 = 1;
  int output2 = solution.shortestPath(grid2, k2);
  std::cout << "Example 2: " << output2 << std::endl; // Expected output: -1 

  // Example 3

  std::vector<std::vector<int>> grid3 = {{0,1,1,1,0,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,1},{0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,1,1,1,0,1,1,1,1],[0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0,0,1,1],[0,1,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,0,1,1,1],[1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,1],[1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1],[0,0,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,0,1],[0,1,1,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,1,0],[0,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,0],[0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0],[1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,1],[0,0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,1],[0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1],[1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,1],[1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,0,1],[1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1],[0,1,1,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1],[1,0,1,0,0,1,0,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1],[0,1,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,1,0,0,0],[0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,1,0,1],[0,0,1,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0],[1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1],[0,0,0,0,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,1,0}};
  int k3 = 617;
  int output3 = solution.shortestPath(grid3, k3);
  std::cout << "Example 3: " << output3 << std::endl; // Expected output: -1 
  return 0;
}
